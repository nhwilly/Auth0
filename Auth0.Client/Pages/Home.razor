@page "/"
@using System.Security.Claims
@using SharedAuth

<PageTitle>Home</PageTitle>

@if (user?.Identities?.Any() ?? false)
{
    @foreach (var identity in user.Identities)
    {
        <div>
            <b>Authentication Type:</b>@identity.AuthenticationType
        </div>
        <div>
            <b>IsAuthenticated:</b>@identity.IsAuthenticated
        </div>
        @foreach (var claim in identity.Claims)
        {
            <div style="display: flex; gap: 1rem;">
                <strong>@claim.Type:</strong>
                <span>@claim.Value</span>
            </div>
        }

        <hr/>
    }
}
else
{
    <div>No identities foundPermission>></div>
}
<h5>@RendererInfo.Name</h5>

@code {
    private ClaimsPrincipal? user;
    private string? name;
    private string? id;
    private string? identityProvider;
    private List<AccountMemberPermissions> accountPermissions = new List<AccountMemberPermissions>();
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;
            user = state?.User;
            SplitSubjectId(user);
        }
    }

    private void SplitSubjectId(ClaimsPrincipal claimsPrincipal)
    {
        if (!claimsPrincipal?.Claims?.Any() ?? false)
        {
            ClearValues();
            return;
        }

        var claim = claimsPrincipal.Claims.FirstOrDefault(x =>
            x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier");

        var claimValue = claim?.Value;

        if (!claimValue?.Contains("|") ?? true)
        {
            ClearValues();
            return;
        }

        var parts = claimValue.Split('|');
        identityProvider = parts[0];
        id = parts[1];
    }

    private void ClearValues()
    {
        identityProvider = string.Empty;
        id = string.Empty;
    }

}

